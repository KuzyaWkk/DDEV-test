<?php

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;
use Drupal\weather_api\Enum\UnitsEnum;

/**
 * Implements hook_entity_type_build().
 */
function login_reg_entity_type_build(array &$entity_types): void {
  $entity_types['user']->setFormClass(
    'login_reg_register', 'Drupal\login_reg\Form\AdvancedRegisterForm'
  );
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function login_reg_field_widget_third_party_settings_form(
  WidgetInterface $plugin,
  FieldDefinitionInterface $field_definition,
  $form_mode,
  array $form,
  FormStateInterface $form_state,
): array {
  $element = [];
  $plugin_id = $plugin->getPluginId();

  $element['rename_title'] = [
    '#type' => 'textfield',
    '#title' => t('Rename the title'),
    '#default_value' => $plugin
      ->getThirdPartySetting('login_reg', 'rename_title'),
  ];

  $element['remove_title'] = [
    '#type' => 'checkbox',
    '#title' => t('Remove the title'),
    '#default_value' => $plugin
      ->getThirdPartySetting('login_reg', 'remove_title')
  ];

 if ($field_definition->getType() == 'entity_reference') {
   $element['remove_first_dash'] = [
     '#type' => 'checkbox',
     '#title' => t('Remove the first dash'),
     '#description' => t('Remove first "-" for child term'),
     '#default_value' => $plugin
       ->getThirdPartySetting('login_reg', 'remove_first_dash'),
   ];
 }

 if ($plugin_id == 'options_select' ||
   $plugin_id == 'options_buttons' ||
   $plugin_id == 'country_default') {
     $element['rename_empty_option'] = [
       '#type' => 'textfield',
       '#title' => t('Rename an empty option'),
       '#description' => t('Example "- Select your option -"'),
       '#default_value' => $plugin
         ->getThirdPartySetting('login_reg', 'rename_empty_option'),
     ];
 }

  return $element;
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function login_reg_field_widget_single_element_form_alter(
  array &$element,
  FormStateInterface $form_state,
  array $context,
): void {
  $widget = $context['widget'];

  if ($title = $widget->getThirdPartySetting('login_reg', 'rename_title')) {
    if (isset($element['value'])) {
      $element['value']['#title'] = $title;
    } else {
      $element['#title'] = $title;
    }
  }

  if ($widget->getThirdPartySetting('login_reg', 'remove_title')) {
    if (isset($element['value'])) {
      unset($element['value']['#title']);
    } else {
      unset($element['#title']);
    }
  }

  if ($widget->getThirdPartySetting('login_reg', 'remove_first_dash')) {
    foreach($element['#options'] as &$term) {
      $term = preg_replace('/^-/', '', $term);
    }
  }

  if ($text = $widget->getThirdPartySetting('login_reg', 'rename_empty_option')) {
    if (isset($element['value'])) {
      $element['value']['#empty_option'] = $text;
    } else {
      $element['#options']['_none'] = $text;
    }
  }

}

/**
 * Implements hook_theme().
 */
function login_reg_theme(): array {
  return [
    'login_registration' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for login registration templates.
 *
 * Default template: login-registration.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the login registration information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_login_registration(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

